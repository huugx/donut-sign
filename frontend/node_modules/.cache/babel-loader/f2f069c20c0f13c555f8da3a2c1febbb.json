{"ast":null,"code":"import { ethers } from \"ethers\";\nexport const SignMessage = async ({\n  message\n}) => {\n  try {\n    if (!window.ethereum) throw new Error(\"No crypto wallet found. Please install it.\");\n    await window.ethereum.send(\"eth_requestAccounts\");\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    const signature = await signer.signMessage(message);\n    const address = await signer.getAddress();\n    return {\n      message,\n      signature,\n      address\n    };\n  } catch (err) {\n    return {\n      error: err.message\n    };\n  }\n};\n_c = SignMessage;\nexport const VerifyMessage = async ({\n  message,\n  address,\n  signature\n}) => {\n  try {\n    const signerAddr = await ethers.utils.verifyMessage(message, signature);\n\n    if (signerAddr !== address) {\n      return false;\n    }\n\n    return true;\n  } catch (err) {\n    console.log(err);\n    return false;\n  }\n};\n_c2 = VerifyMessage;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"SignMessage\");\n$RefreshReg$(_c2, \"VerifyMessage\");","map":{"version":3,"sources":["/Users/hugo/Documents/Code/donut.sign/frontend/src/components/wallet/signature.js"],"names":["ethers","SignMessage","message","window","ethereum","Error","send","provider","providers","Web3Provider","signer","getSigner","signature","signMessage","address","getAddress","err","error","VerifyMessage","signerAddr","utils","verifyMessage","console","log"],"mappings":"AAAA,SAASA,MAAT,QAAuB,QAAvB;AAEA,OAAO,MAAMC,WAAW,GAAG,OAAO;AAAEC,EAAAA;AAAF,CAAP,KAAuB;AAChD,MAAI;AACF,QAAI,CAACC,MAAM,CAACC,QAAZ,EACE,MAAM,IAAIC,KAAJ,CAAU,4CAAV,CAAN;AAEF,UAAMF,MAAM,CAACC,QAAP,CAAgBE,IAAhB,CAAqB,qBAArB,CAAN;AACA,UAAMC,QAAQ,GAAG,IAAIP,MAAM,CAACQ,SAAP,CAAiBC,YAArB,CAAkCN,MAAM,CAACC,QAAzC,CAAjB;AACA,UAAMM,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;AACA,UAAMC,SAAS,GAAG,MAAMF,MAAM,CAACG,WAAP,CAAmBX,OAAnB,CAAxB;AACA,UAAMY,OAAO,GAAG,MAAMJ,MAAM,CAACK,UAAP,EAAtB;AAEA,WAAO;AACLb,MAAAA,OADK;AAELU,MAAAA,SAFK;AAGLE,MAAAA;AAHK,KAAP;AAKD,GAfD,CAeE,OAAOE,GAAP,EAAY;AACV,WAAO;AACLC,MAAAA,KAAK,EAAED,GAAG,CAACd;AADN,KAAP;AAGH;AACF,CArBM;KAAMD,W;AAuBb,OAAO,MAAMiB,aAAa,GAAG,OAAO;AAAEhB,EAAAA,OAAF;AAAWY,EAAAA,OAAX;AAAoBF,EAAAA;AAApB,CAAP,KAA2C;AACtE,MAAI;AACF,UAAMO,UAAU,GAAG,MAAMnB,MAAM,CAACoB,KAAP,CAAaC,aAAb,CAA2BnB,OAA3B,EAAoCU,SAApC,CAAzB;;AACA,QAAIO,UAAU,KAAKL,OAAnB,EAA4B;AAC1B,aAAO,KAAP;AACD;;AAED,WAAO,IAAP;AACD,GAPD,CAOE,OAAOE,GAAP,EAAY;AACZM,IAAAA,OAAO,CAACC,GAAR,CAAYP,GAAZ;AACA,WAAO,KAAP;AACD;AACF,CAZM;MAAME,a","sourcesContent":["import { ethers } from \"ethers\";\n\nexport const SignMessage = async ({ message }) => {\n  try {\n    if (!window.ethereum)\n      throw new Error(\"No crypto wallet found. Please install it.\");\n\n    await window.ethereum.send(\"eth_requestAccounts\");\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    const signature = await signer.signMessage(message);\n    const address = await signer.getAddress();\n\n    return {\n      message,\n      signature,\n      address\n    };\n  } catch (err) {\n      return { \n        error: err.message \n      };\n  }\n};\n\nexport const VerifyMessage = async ({ message, address, signature }) => {\n  try {\n    const signerAddr = await ethers.utils.verifyMessage(message, signature);\n    if (signerAddr !== address) {\n      return false;\n    }\n\n    return true;\n  } catch (err) {\n    console.log(err);\n    return false;\n  }\n};"]},"metadata":{},"sourceType":"module"}