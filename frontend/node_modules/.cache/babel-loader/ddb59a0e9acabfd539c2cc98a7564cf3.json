{"ast":null,"code":"import _regeneratorRuntime from\"/Users/hugo/Documents/Code/Scripts/donut-sign/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/hugo/Documents/Code/Scripts/donut-sign/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{ethers}from\"ethers\";export var SignMessage=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref){var message,provider,signer,signature,address;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:message=_ref.message;_context.prev=1;if(window.ethereum){_context.next=4;break;}throw new Error(\"No crypto wallet found. Please install it.\");case 4:_context.next=6;return window.ethereum.send(\"eth_requestAccounts\");case 6:provider=new ethers.providers.Web3Provider(window.ethereum);signer=provider.getSigner();_context.next=10;return signer.signMessage(message);case 10:signature=_context.sent;_context.next=13;return signer.getAddress();case 13:address=_context.sent;return _context.abrupt(\"return\",{message:message,signature:signature,address:address});case 17:_context.prev=17;_context.t0=_context[\"catch\"](1);return _context.abrupt(\"return\",{error:_context.t0.message});case 20:case\"end\":return _context.stop();}}},_callee,null,[[1,17]]);}));return function SignMessage(_x){return _ref2.apply(this,arguments);};}();export var VerifyMessage=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref3){var message,address,signature,signerAddr;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:message=_ref3.message,address=_ref3.address,signature=_ref3.signature;_context2.prev=1;_context2.next=4;return ethers.utils.verifyMessage(message,signature);case 4:signerAddr=_context2.sent;if(!(signerAddr!==address)){_context2.next=7;break;}return _context2.abrupt(\"return\",false);case 7:return _context2.abrupt(\"return\",true);case 10:_context2.prev=10;_context2.t0=_context2[\"catch\"](1);console.log(_context2.t0);return _context2.abrupt(\"return\",false);case 14:case\"end\":return _context2.stop();}}},_callee2,null,[[1,10]]);}));return function VerifyMessage(_x2){return _ref4.apply(this,arguments);};}();","map":{"version":3,"sources":["/Users/hugo/Documents/Code/Scripts/donut-sign/frontend/src/components/wallet/signature.js"],"names":["ethers","SignMessage","message","window","ethereum","Error","send","provider","providers","Web3Provider","signer","getSigner","signMessage","signature","getAddress","address","error","VerifyMessage","utils","verifyMessage","signerAddr","console","log"],"mappings":"uVAAA,OAASA,MAAT,KAAuB,QAAvB,CAEA,MAAO,IAAMC,CAAAA,WAAW,2FAAG,qLAASC,OAAT,MAASA,OAAT,oBAElBC,MAAM,CAACC,QAFW,8BAGf,IAAIC,CAAAA,KAAJ,CAAU,4CAAV,CAHe,8BAKjBF,CAAAA,MAAM,CAACC,QAAP,CAAgBE,IAAhB,CAAqB,qBAArB,CALiB,QAMjBC,QANiB,CAMN,GAAIP,CAAAA,MAAM,CAACQ,SAAP,CAAiBC,YAArB,CAAkCN,MAAM,CAACC,QAAzC,CANM,CAOjBM,MAPiB,CAORH,QAAQ,CAACI,SAAT,EAPQ,wBAQCD,CAAAA,MAAM,CAACE,WAAP,CAAmBV,OAAnB,CARD,SAQjBW,SARiB,sCASDH,CAAAA,MAAM,CAACI,UAAP,EATC,SASjBC,OATiB,+CAWhB,CACLb,OAAO,CAAPA,OADK,CAELW,SAAS,CAATA,SAFK,CAGLE,OAAO,CAAPA,OAHK,CAXgB,4FAiBd,CACLC,KAAK,CAAE,YAAId,OADN,CAjBc,uEAAH,kBAAXD,CAAAA,WAAW,6CAAjB,CAuBP,MAAO,IAAMgB,CAAAA,aAAa,2FAAG,sLAASf,OAAT,OAASA,OAAT,CAAkBa,OAAlB,OAAkBA,OAAlB,CAA2BF,SAA3B,OAA2BA,SAA3B,yCAEAb,CAAAA,MAAM,CAACkB,KAAP,CAAaC,aAAb,CAA2BjB,OAA3B,CAAoCW,SAApC,CAFA,QAEnBO,UAFmB,qBAGrBA,UAAU,GAAKL,OAHM,4DAIhB,KAJgB,0CAOlB,IAPkB,+DASzBM,OAAO,CAACC,GAAR,eATyB,iCAUlB,KAVkB,yEAAH,kBAAbL,CAAAA,aAAa,8CAAnB","sourcesContent":["import { ethers } from \"ethers\";\n\nexport const SignMessage = async ({ message }) => {\n  try {\n    if (!window.ethereum)\n      throw new Error(\"No crypto wallet found. Please install it.\");\n\n    await window.ethereum.send(\"eth_requestAccounts\");\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    const signature = await signer.signMessage(message);\n    const address = await signer.getAddress();\n\n    return {\n      message,\n      signature,\n      address\n    };\n  } catch (err) {\n      return { \n        error: err.message \n      };\n  }\n};\n\nexport const VerifyMessage = async ({ message, address, signature }) => {\n  try {\n    const signerAddr = await ethers.utils.verifyMessage(message, signature);\n    if (signerAddr !== address) {\n      return false;\n    }\n\n    return true;\n  } catch (err) {\n    console.log(err);\n    return false;\n  }\n};"]},"metadata":{},"sourceType":"module"}