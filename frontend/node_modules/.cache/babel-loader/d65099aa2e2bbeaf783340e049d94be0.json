{"ast":null,"code":"import _regeneratorRuntime from\"/Users/hugo/Documents/Code/Scripts/donut-sign/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/hugo/Documents/Code/Scripts/donut-sign/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{Contract}from\"@ethersproject/contracts\";import chains from\"./contracts/chains.json\";import abis from\"./contracts/abis\";export var useDonuts=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(active,provider,address,network){var donutBalance,contract;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:donutBalance=0;if(active){_context.next=3;break;}return _context.abrupt(\"return\",{donutBalance:donutBalance});case 3:contract=new Contract(chains[network.chainId].donut,abis.IERC20,provider);_context.next=6;return contract.balanceOf(address);case 6:donutBalance=_context.sent;return _context.abrupt(\"return\",{donutBalance:donutBalance});case 8:case\"end\":return _context.stop();}}},_callee);}));return function useDonuts(_x,_x2,_x3,_x4){return _ref.apply(this,arguments);};}();// import React, { useState, useEffect, useContext, createContext } from \"react\";\n// import { Contract } from \"@ethersproject/contracts\";\n// import { Zero } from \"@ethersproject/constants\";\n// import chains from \"./contracts/chains.json\";\n// import abis from \"./contracts/abis\";\n// const donutContext = createContext();\n// export function UseDonutsProvider({ web3React, children }){\n//   const donuts = useProvideDonuts(web3React);\n//   return <donutContext.Provider value={donuts}>{children}</donutContext.Provider>;\n// }\n// export const useDonuts = () => {\n//   return useContext(donutContext);\n// };\n// function useProvideDonuts({account, active, library, chainId}){\n//   const [signer, setSigner] = useState(null);\n//   const [feeBalance, setFeeBalance] = useState(Zero);\n//   const [donutBalance, setDonutBalance] = useState(Zero);\n//   const [token, setToken] = useState(null);\n//   const [tipping, setTipping] = useState(null);\n//   useEffect(() => {\n//     if(!active) { setSigner(null); setFeeBalance(Zero); setDonutBalance(Zero); setToken(null); setTipping(null); return; }\n//     setSigner(library.getSigner())\n//     const token = new Contract(chains[chainId.toString()].donut, abis.IERC20, library);\n//     setToken(token);\n//     setTipping(tipping);\n//     async function getBalance(account){\n//       setFeeBalance(await library.getBalance(account));\n//       setDonutBalance(await token.balanceOf(account));\n//     }\n//     account && getBalance(account);\n//   }, [active, chainId])\n//   return {\n//     signer,\n//     feeBalance,\n//     donutBalance,\n//     token\n//   };\n// }","map":{"version":3,"sources":["/Users/hugo/Documents/Code/Scripts/donut-sign/frontend/src/components/wallet/useDonuts.js"],"names":["Contract","chains","abis","useDonuts","active","provider","address","network","donutBalance","contract","chainId","donut","IERC20","balanceOf"],"mappings":"uVAAA,OAASA,QAAT,KAAyB,0BAAzB,CACA,MAAOC,CAAAA,MAAP,KAAmB,yBAAnB,CACA,MAAOC,CAAAA,IAAP,KAAiB,kBAAjB,CAEA,MAAO,IAAMC,CAAAA,SAAS,0FAAG,iBAAQC,MAAR,CAAgBC,QAAhB,CAA0BC,OAA1B,CAAmCC,OAAnC,4IACnBC,YADmB,CACJ,CADI,IAElBJ,MAFkB,yDAEH,CAAEI,YAAY,CAAZA,YAAF,CAFG,SAInBC,QAJmB,CAIR,GAAIT,CAAAA,QAAJ,CAAaC,MAAM,CAACM,OAAO,CAACG,OAAT,CAAN,CAAwBC,KAArC,CAA4CT,IAAI,CAACU,MAAjD,CAAyDP,QAAzD,CAJQ,uBAKDI,CAAAA,QAAQ,CAACI,SAAT,CAAmBP,OAAnB,CALC,QAKvBE,YALuB,+CAOhB,CAAEA,YAAY,CAAZA,YAAF,CAPgB,wDAAH,kBAATL,CAAAA,SAAS,wDAAf,CAUP;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { Contract } from \"@ethersproject/contracts\";\nimport chains from \"./contracts/chains.json\";\nimport abis from \"./contracts/abis\";\n\nexport const useDonuts = async ( active, provider, address, network ) => {\n  let donutBalance = 0;\n  if (!active) return { donutBalance };\n\n  let contract = new Contract(chains[network.chainId].donut, abis.IERC20, provider);\n  donutBalance = (await contract.balanceOf(address));\n  \n  return { donutBalance }\n}\n\n// import React, { useState, useEffect, useContext, createContext } from \"react\";\n// import { Contract } from \"@ethersproject/contracts\";\n// import { Zero } from \"@ethersproject/constants\";\n// import chains from \"./contracts/chains.json\";\n// import abis from \"./contracts/abis\";\n\n// const donutContext = createContext();\n\n// export function UseDonutsProvider({ web3React, children }){\n//   const donuts = useProvideDonuts(web3React);\n//   return <donutContext.Provider value={donuts}>{children}</donutContext.Provider>;\n// }\n\n// export const useDonuts = () => {\n//   return useContext(donutContext);\n// };\n\n// function useProvideDonuts({account, active, library, chainId}){\n//   const [signer, setSigner] = useState(null);\n//   const [feeBalance, setFeeBalance] = useState(Zero);\n//   const [donutBalance, setDonutBalance] = useState(Zero);\n//   const [token, setToken] = useState(null);\n//   const [tipping, setTipping] = useState(null);\n\n//   useEffect(() => {\n//     if(!active) { setSigner(null); setFeeBalance(Zero); setDonutBalance(Zero); setToken(null); setTipping(null); return; }\n//     setSigner(library.getSigner())\n//     const token = new Contract(chains[chainId.toString()].donut, abis.IERC20, library);\n//     setToken(token);\n//     setTipping(tipping);\n//     async function getBalance(account){\n//       setFeeBalance(await library.getBalance(account));\n//       setDonutBalance(await token.balanceOf(account));\n//     }\n//     account && getBalance(account);\n//   }, [active, chainId])\n\n//   return {\n//     signer,\n//     feeBalance,\n//     donutBalance,\n//     token\n//   };\n// }"]},"metadata":{},"sourceType":"module"}