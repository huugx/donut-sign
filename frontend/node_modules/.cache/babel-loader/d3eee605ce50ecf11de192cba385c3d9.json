{"ast":null,"code":"var _jsxFileName = \"/Users/hugo/Documents/Code/Scripts/donut-sign/frontend/src/pages/optin.js\";\nimport React from \"react\";\nimport { ethers } from \"ethers\";\nimport { ErrorMessage, Modal, Greeting, Disclaimer } from \"../components/containers\";\nimport axios from \"axios\";\nimport { SignMessage, VerifyMessage } from \"../components/wallet/signature\";\nimport { ToggleSwitch } from \"../components/toggleswitch\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst dotenv = require(\"dotenv\");\n\ndotenv.config(); // axios.defaults.baseURL = \"https://ethtrader-optin-chain.herokuapp.com\";\n// axios.defaults.baseURL = \"http://localhost:3001\";\n\naxios.defaults.baseURL = process.env.SERVER_URL;\nconsole.log(process.env.SERVER_URL);\n\nclass Optin extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getUserData = async () => {\n      const config = {\n        params: {\n          address: this.state.currentAddress\n        }\n      };\n      console.log();\n      await axios.get('/api/user', config).then(response => {\n        if (!response.data.length) {\n          console.log('no user found');\n          this.setState({\n            isAddressNew: true\n          });\n        } else {\n          const data = response.data;\n          console.log(data);\n          this.setState({\n            user: data,\n            username: data[0].username,\n            optChain: data[0].chain,\n            isAddressNew: false\n          });\n        }\n      }).catch(err => {\n        console.log('Internal server error: ', err);\n      });\n      this.getInitialState();\n    };\n\n    this.getInitialState = () => {\n      if (this.state.optChain === 'xdai') {\n        this.setState({\n          toggle: true\n        });\n      } else {\n        this.setState({\n          toggle: false\n        });\n      }\n    };\n\n    this.changeHandler = async event => {\n      event.preventDefault();\n      const isSigned = await this.handleSign(event);\n\n      if (isSigned) {\n        const isValid = await this.handleVerify(event);\n\n        if (isValid) {\n          this.setState({\n            isSigning: false\n          });\n          this.setState({\n            toggle: !this.state.toggle\n          }, () => {\n            if (this.state.toggle === true) {\n              this.setState({\n                value: 'xdai'\n              }, () => {\n                this.postData();\n              });\n            } else {\n              this.setState({\n                value: 'ethereum'\n              }, () => {\n                this.postData();\n              });\n            }\n          });\n        }\n      }\n    };\n\n    this.eventListeners = async () => {\n      window.ethereum.on('accountsChanged', accounts => {\n        this.setState({\n          currentAddress: accounts[0]\n        });\n      });\n      window.ethereum.on('chainChanged', network => {\n        this.setState({\n          network: parseInt(network)\n        });\n      });\n    };\n\n    this.handleSign = async event => {\n      event.preventDefault();\n      this.setState({\n        isSigning: true\n      });\n      this.setState({\n        error: null\n      });\n      const sig = await SignMessage({\n        message: `Opting in to receive $DONUT 🍩 distributions on ${this.state.value}, please ensure this address matches the one used to register on /r/Ethtrader! ${\"\\n\\n\"} ${this.state.currentAddress}`\n      });\n\n      if (!sig.error) {\n        console.log('Signature: ', sig);\n        this.setState({\n          message: sig.message,\n          signature: sig.signature,\n          error: null\n        });\n        return true;\n      } else {\n        if (4001) {\n          this.setState({\n            error: \"User denied message signature.\",\n            isSigning: false\n          });\n        } else {\n          this.setState({\n            error: sig.error,\n            isSigning: false\n          });\n        }\n\n        return false;\n      }\n    };\n\n    this.handleVerify = async () => {\n      const isValid = await VerifyMessage({\n        message: this.state.message,\n        address: this.state.currentAddress,\n        signature: this.state.signature\n      });\n      if (!isValid) return false;\n      return true;\n    };\n\n    this.postData = async () => {\n      const payload = {\n        address: this.state.currentAddress,\n        chain: this.state.value\n      };\n      axios({\n        url: '/api/save',\n        method: 'POST',\n        data: payload\n      }).then(() => {\n        console.log(`Data sent to server! Opted-in to ${payload.chain}`);\n        this.setState({\n          successSign: true,\n          isSigning: false\n        });\n        this.getUserData();\n      }).catch(() => {\n        console.log('Internal server error!');\n      });\n    };\n\n    this.state = {\n      isMetamaskConnected: false,\n      isAddressNew: true,\n      isSigning: false,\n      successSign: false,\n      active: false,\n      provider: \"\",\n      signer: \"\",\n      message: \"\",\n      currentAddress: \"\",\n      prevAddress: \"\",\n      network: 0,\n      signature: \"\",\n      error: \"\",\n      value: \"ethereum\",\n      user: [],\n      username: \"\",\n      optChain: null,\n      toggle: false\n    };\n  }\n\n  async componentDidMount() {\n    await window.ethereum.request({\n      method: 'eth_requestAccounts'\n    });\n\n    if (typeof window.ethereum !== 'undefined') {\n      let provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\n      let signer = await provider.getSigner();\n      let network = await provider.getNetwork();\n      let currentAddress = await signer.getAddress();\n      this.setState({\n        provider: provider,\n        signer: signer,\n        network: network.chainId,\n        currentAddress: currentAddress\n      });\n      this.eventListeners();\n      this.getUserData();\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Modal, {\n          title: \"Setting Distribution Chain\",\n          button: \"\",\n          onClose: () => this.setState({\n            isSigning: false\n          }),\n          show: this.state.isSigning,\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Prove ownership of address by accepting the signature request in your wallet.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Modal, {\n          title: \"Success\",\n          button: \"OK\",\n          onClose: () => this.setState({\n            successSign: false\n          }),\n          show: this.state.successSign,\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"The distribution chain has been changed to \", this.state.value, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Greeting, {\n        user: this.state.username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ToggleSwitch, {\n        checked: this.state.toggle,\n        onChange: this.changeHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n        message: this.state.error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Disclaimer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Optin;","map":{"version":3,"sources":["/Users/hugo/Documents/Code/Scripts/donut-sign/frontend/src/pages/optin.js"],"names":["React","ethers","ErrorMessage","Modal","Greeting","Disclaimer","axios","SignMessage","VerifyMessage","ToggleSwitch","dotenv","require","config","defaults","baseURL","process","env","SERVER_URL","console","log","Optin","Component","constructor","props","getUserData","params","address","state","currentAddress","get","then","response","data","length","setState","isAddressNew","user","username","optChain","chain","catch","err","getInitialState","toggle","changeHandler","event","preventDefault","isSigned","handleSign","isValid","handleVerify","isSigning","value","postData","eventListeners","window","ethereum","on","accounts","network","parseInt","error","sig","message","signature","payload","url","method","successSign","isMetamaskConnected","active","provider","signer","prevAddress","componentDidMount","request","providers","Web3Provider","getSigner","getNetwork","getAddress","chainId","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { ethers } from \"ethers\";\nimport { ErrorMessage, Modal, Greeting, Disclaimer } from \"../components/containers\";\nimport axios from \"axios\";\nimport { SignMessage, VerifyMessage } from \"../components/wallet/signature\";\nimport { ToggleSwitch } from \"../components/toggleswitch\";\nconst dotenv = require(\"dotenv\")\ndotenv.config()\n\n// axios.defaults.baseURL = \"https://ethtrader-optin-chain.herokuapp.com\";\n// axios.defaults.baseURL = \"http://localhost:3001\";\naxios.defaults.baseURL = process.env.SERVER_URL;\nconsole.log(process.env.SERVER_URL)\n\nclass Optin extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isMetamaskConnected: false,\n            isAddressNew: true,\n            isSigning: false,\n            successSign: false,\n            \n            active: false,\n            provider: \"\",\n            signer: \"\",\n            message: \"\",\n            currentAddress: \"\",\n            prevAddress: \"\",\n            network: 0,\n            signature: \"\",\n            error: \"\",\n            value: \"ethereum\",\n            user: [],\n            username: \"\",\n            optChain: null,\n            toggle: false,\n        };\n    }\n\n    async componentDidMount() {\n        await window.ethereum.request({ method: 'eth_requestAccounts' });\n        if (typeof window.ethereum !== 'undefined') {       \n          let provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\n          let signer = await provider.getSigner();\n          let network = await provider.getNetwork();\n          let currentAddress = await signer.getAddress();\n  \n          this.setState({\n              provider: provider,\n              signer: signer,\n              network: network.chainId,\n              currentAddress: currentAddress\n          });\n\n          this.eventListeners();\n          this.getUserData();\n        }\n    }\n\n    getUserData = async () => {\n        const config = { params: { address: this.state.currentAddress } };\n        console.log()\n\n        await axios.get('/api/user', config)\n        .then((response) => {\n            if (!response.data.length) {\n                console.log('no user found');\n                this.setState({\n                    isAddressNew: true\n                })\n            } else {\n                const data = response.data;\n                console.log(data)\n                this.setState({ \n                    user: data,\n                    username: data[0].username,\n                    optChain: data[0].chain,\n                    isAddressNew: false\n                });\n            }\n        }) .catch((err) => {\n            console.log('Internal server error: ', err); \n        });\n        this.getInitialState();\n    }\n\n    getInitialState = () => {\n        if (this.state.optChain === 'xdai') {\n            this.setState({ toggle: true });\n        } else { \n            this.setState({ toggle: false });\n        }\n    }\n\n    changeHandler = async (event) => {\n        event.preventDefault();\n        const isSigned = await this.handleSign(event);\n        if (isSigned) {\n            const isValid = await this.handleVerify(event);\n            if (isValid) {\n                this.setState({ isSigning: false });\n                this.setState({ toggle: !this.state.toggle }, () => {\n                    if (this.state.toggle === true) { \n                        this.setState({ value:'xdai' }, () => { this.postData() });\n                    } else { \n                        this.setState({ value: 'ethereum' }, () => { this.postData() });\n                    }\n                });\n        }}        \n    }\n\n    // Event Listeners\n    eventListeners = async () => {\n        window.ethereum.on('accountsChanged', (accounts) => {\n            this.setState({ \n                currentAddress: accounts[0] \n            });\n        });\n      \n        window.ethereum.on('chainChanged', (network) => {\n            this.setState({\n                network: parseInt(network)\n            });\n        });\n    }\n\n\n    // Sign and Verify\n    handleSign = async (event) => {\n        event.preventDefault();\n        this.setState({ isSigning: true })\n        this.setState({ error: null });\n\n        const sig = await SignMessage({\n            message: `Opting in to receive $DONUT 🍩 distributions on ${this.state.value}, please ensure this address matches the one used to register on /r/Ethtrader! ${\"\\n\\n\"} ${this.state.currentAddress}`\n        });\n\n        if (!sig.error) {\n            console.log('Signature: ', sig);\n            this.setState({\n                message: sig.message,\n                signature: sig.signature,\n                error: null\n            })\n            return true;\n        } else {\n            if (4001) {\n                this.setState({\n                    error: \"User denied message signature.\",\n                    isSigning: false\n                });\n            } else {\n                this.setState({\n                    error: sig.error,\n                    isSigning: false\n                });\n            }\n            return false;\n        }\n    }\n\n    handleVerify = async () => {\n        const isValid = await VerifyMessage({\n            message: this.state.message,\n            address: this.state.currentAddress,\n            signature: this.state.signature\n        })\n        \n        if (!isValid) return false;\n        \n        return true;\n    }\n\n    postData = async () => {\n        const payload = {\n            address: this.state.currentAddress,\n            chain: this.state.value\n        };\n\n        axios({\n            url: '/api/save',\n            method: 'POST',\n            data: payload\n        })\n        .then(() => {\n            console.log(`Data sent to server! Opted-in to ${payload.chain}`);\n            this.setState({ \n                successSign: true,\n                isSigning: false,\n            });\n            this.getUserData();\n        })\n        .catch(() => {\n            console.log('Internal server error!')\n        });\n    }\n\n    render() {\n\n        return (\n            <div className=\"content\">\n                <div>\n                    <Modal title=\"Setting Distribution Chain\" button=\"\" onClose={() => this.setState({ isSigning: false })} show={this.state.isSigning}>\n                        <p>Prove ownership of address by accepting the signature request in your wallet.</p>\n                    </Modal>\n                    <Modal title=\"Success\" button=\"OK\" onClose={() => this.setState({ successSign: false })} show={this.state.successSign}>\n                        <p>The distribution chain has been changed to {this.state.value} </p>\n                    </Modal>\n                </div>\n\n                <Greeting user={this.state.username} />\n\n                <ToggleSwitch checked={this.state.toggle} onChange={this.changeHandler} />\n                \n                <ErrorMessage message={this.state.error} />\n\n                <Disclaimer />\n            </div>\n        );\n    }\n}\n\nexport default Optin;"]},"metadata":{},"sourceType":"module"}