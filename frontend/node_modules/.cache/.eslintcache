[{"/Users/hugo/Documents/Code/Scripts/donut-sign/frontend/src/index.js":"1","/Users/hugo/Documents/Code/Scripts/donut-sign/frontend/src/reportWebVitals.js":"2","/Users/hugo/Documents/Code/Scripts/donut-sign/frontend/src/App.js":"3","/Users/hugo/Documents/Code/Scripts/donut-sign/frontend/src/pages/optin.js":"4","/Users/hugo/Documents/Code/Scripts/donut-sign/frontend/src/components/wallet/WalletInfo.js":"5","/Users/hugo/Documents/Code/Scripts/donut-sign/frontend/src/components/containers.js":"6","/Users/hugo/Documents/Code/Scripts/donut-sign/frontend/src/components/wallet/signature.js":"7","/Users/hugo/Documents/Code/Scripts/donut-sign/frontend/src/components/toggleswitch.js":"8","/Users/hugo/Documents/Code/Scripts/donut-sign/frontend/src/components/wallet/useDonuts.js":"9","/Users/hugo/Documents/Code/Scripts/donut-sign/frontend/src/components/wallet/utils.js":"10","/Users/hugo/Documents/Code/Scripts/donut-sign/frontend/src/components/wallet/contracts/abis.js":"11"},{"size":500,"mtime":1636254255956,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":1636254255957,"results":"14","hashOfConfig":"13"},{"size":428,"mtime":1636254929959,"results":"15","hashOfConfig":"13"},{"size":7023,"mtime":1636640621991,"results":"16","hashOfConfig":"13"},{"size":2576,"mtime":1636167597725,"results":"17","hashOfConfig":"13"},{"size":2010,"mtime":1636429995476,"results":"18","hashOfConfig":"13"},{"size":910,"mtime":1634922475299,"results":"19","hashOfConfig":"13"},{"size":614,"mtime":1636147873207,"results":"20","hashOfConfig":"13"},{"size":2048,"mtime":1636152756514,"results":"21","hashOfConfig":"13"},{"size":424,"mtime":1636041396530,"results":"22","hashOfConfig":"13"},{"size":272,"mtime":1635545273493,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"zvf75j",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"/Users/hugo/Documents/Code/Scripts/donut-sign/frontend/src/index.js",[],["49","50"],"/Users/hugo/Documents/Code/Scripts/donut-sign/frontend/src/reportWebVitals.js",[],"/Users/hugo/Documents/Code/Scripts/donut-sign/frontend/src/App.js",[],"/Users/hugo/Documents/Code/Scripts/donut-sign/frontend/src/pages/optin.js",["51"],"import React from \"react\";\nimport { ethers } from \"ethers\";\nimport { ErrorMessage, Modal, Greeting, Disclaimer } from \"../components/containers\";\nimport axios from \"axios\";\nimport { SignMessage, VerifyMessage } from \"../components/wallet/signature\";\nimport { ToggleSwitch } from \"../components/toggleswitch\";\nconst dotenv = require(\"dotenv\")\ndotenv.config()\n\n// axios.defaults.baseURL = \"https://ethtrader-optin-chain.herokuapp.com\";\n// axios.defaults.baseURL = \"http://localhost:3001\";\naxios.defaults.baseURL = process.env.SERVER_URL;\nconsole.log(process.env.SERVER_URL)\n\nclass Optin extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isMetamaskConnected: false,\n            isAddressNew: true,\n            isSigning: false,\n            successSign: false,\n            \n            active: false,\n            provider: \"\",\n            signer: \"\",\n            message: \"\",\n            currentAddress: \"\",\n            prevAddress: \"\",\n            network: 0,\n            signature: \"\",\n            error: \"\",\n            value: \"ethereum\",\n            user: [],\n            username: \"\",\n            optChain: null,\n            toggle: false,\n        };\n    }\n\n    async componentDidMount() {\n        await window.ethereum.request({ method: 'eth_requestAccounts' });\n        if (typeof window.ethereum !== 'undefined') {       \n          let provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\n          let signer = await provider.getSigner();\n          let network = await provider.getNetwork();\n          let currentAddress = await signer.getAddress();\n  \n          this.setState({\n              provider: provider,\n              signer: signer,\n              network: network.chainId,\n              currentAddress: currentAddress\n          });\n\n          this.eventListeners();\n          this.getUserData();\n        }\n    }\n\n    getUserData = async () => {\n        const config = { params: { address: this.state.currentAddress } };\n        console.log()\n\n        await axios.get('/api/user', config)\n        .then((response) => {\n            if (!response.data.length) {\n                console.log('no user found');\n                this.setState({\n                    isAddressNew: true\n                })\n            } else {\n                const data = response.data;\n                console.log(data)\n                this.setState({ \n                    user: data,\n                    username: data[0].username,\n                    optChain: data[0].chain,\n                    isAddressNew: false\n                });\n            }\n        }) .catch((err) => {\n            console.log('Internal server error: ', err); \n        });\n        this.getInitialState();\n    }\n\n    getInitialState = () => {\n        if (this.state.optChain === 'xdai') {\n            this.setState({ toggle: true });\n        } else { \n            this.setState({ toggle: false });\n        }\n    }\n\n    changeHandler = async (event) => {\n        event.preventDefault();\n        const isSigned = await this.handleSign(event);\n        if (isSigned) {\n            const isValid = await this.handleVerify(event);\n            if (isValid) {\n                this.setState({ isSigning: false });\n                this.setState({ toggle: !this.state.toggle }, () => {\n                    if (this.state.toggle === true) { \n                        this.setState({ value:'xdai' }, () => { this.postData() });\n                    } else { \n                        this.setState({ value: 'ethereum' }, () => { this.postData() });\n                    }\n                });\n        }}        \n    }\n\n    // Event Listeners\n    eventListeners = async () => {\n        window.ethereum.on('accountsChanged', (accounts) => {\n            this.setState({ \n                currentAddress: accounts[0] \n            });\n        });\n      \n        window.ethereum.on('chainChanged', (network) => {\n            this.setState({\n                network: parseInt(network)\n            });\n        });\n    }\n\n\n    // Sign and Verify\n    handleSign = async (event) => {\n        event.preventDefault();\n        this.setState({ isSigning: true })\n        this.setState({ error: null });\n\n        const sig = await SignMessage({\n            message: `Opting in to receive $DONUT 🍩 distributions on ${this.state.value}, please ensure this address matches the one used to register on /r/Ethtrader! ${\"\\n\\n\"} ${this.state.currentAddress}`\n        });\n\n        if (!sig.error) {\n            console.log('Signature: ', sig);\n            this.setState({\n                message: sig.message,\n                signature: sig.signature,\n                error: null\n            })\n            return true;\n        } else {\n            if (4001) {\n                this.setState({\n                    error: \"User denied message signature.\",\n                    isSigning: false\n                });\n            } else {\n                this.setState({\n                    error: sig.error,\n                    isSigning: false\n                });\n            }\n            return false;\n        }\n    }\n\n    handleVerify = async () => {\n        const isValid = await VerifyMessage({\n            message: this.state.message,\n            address: this.state.currentAddress,\n            signature: this.state.signature\n        })\n        \n        if (!isValid) return false;\n        \n        return true;\n    }\n\n    postData = async () => {\n        const payload = {\n            address: this.state.currentAddress,\n            chain: this.state.value\n        };\n\n        axios({\n            url: '/api/save',\n            method: 'POST',\n            data: payload\n        })\n        .then(() => {\n            console.log(`Data sent to server! Opted-in to ${payload.chain}`);\n            this.setState({ \n                successSign: true,\n                isSigning: false,\n            });\n            this.getUserData();\n        })\n        .catch(() => {\n            console.log('Internal server error!')\n        });\n    }\n\n    render() {\n\n        return (\n            <div className=\"content\">\n                <div>\n                    <Modal title=\"Setting Distribution Chain\" button=\"\" onClose={() => this.setState({ isSigning: false })} show={this.state.isSigning}>\n                        <p>Prove ownership of address by accepting the signature request in your wallet.</p>\n                    </Modal>\n                    <Modal title=\"Success\" button=\"OK\" onClose={() => this.setState({ successSign: false })} show={this.state.successSign}>\n                        <p>The distribution chain has been changed to {this.state.value} </p>\n                    </Modal>\n                </div>\n\n                <Greeting user={this.state.username} />\n\n                <ToggleSwitch checked={this.state.toggle} onChange={this.changeHandler} />\n                \n                <ErrorMessage message={this.state.error} />\n\n                <Disclaimer />\n            </div>\n        );\n    }\n}\n\nexport default Optin;","/Users/hugo/Documents/Code/Scripts/donut-sign/frontend/src/components/wallet/WalletInfo.js",[],"/Users/hugo/Documents/Code/Scripts/donut-sign/frontend/src/components/containers.js",[],"/Users/hugo/Documents/Code/Scripts/donut-sign/frontend/src/components/wallet/signature.js",[],"/Users/hugo/Documents/Code/Scripts/donut-sign/frontend/src/components/toggleswitch.js",[],"/Users/hugo/Documents/Code/Scripts/donut-sign/frontend/src/components/wallet/useDonuts.js",[],"/Users/hugo/Documents/Code/Scripts/donut-sign/frontend/src/components/wallet/utils.js",["52"],"export const commaNumber = num => num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\").replace(/[^0-9^,^\\.]+/g, '');\n\nexport const shortNum = donuts => {\n  let val = NaN;\n  if (donuts > 0) donuts = Math.floor(donuts)\n  if (donuts < 100000) val = commaNumber(donuts);\n  else if (donuts < 1000000) val = Math.floor(donuts/1000) + 'K';\n  else val = Math.floor(donuts/100000)/10 + 'M';\n  return Number.isNaN(val) ? '0' : val;\n}\n","/Users/hugo/Documents/Code/Scripts/donut-sign/frontend/src/components/wallet/contracts/abis.js",[],{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":67,"column":15,"nodeType":"59","messageId":"60","endLine":84,"endColumn":18,"fix":"61"},{"ruleId":"62","severity":1,"message":"63","line":1,"column":105,"nodeType":"64","messageId":"65","endLine":1,"endColumn":106,"suggestions":"66"},"no-native-reassign",["67"],"no-negated-in-lhs",["68"],"no-whitespace-before-property","Unexpected whitespace before property catch.","MemberExpression","unexpectedWhitespace",{"range":"69","text":"70"},"no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["71","72"],"no-global-assign","no-unsafe-negation",[2628,2630],".",{"messageId":"73","fix":"74","desc":"75"},{"messageId":"76","fix":"77","desc":"78"},"removeEscape",{"range":"79","text":"80"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"81","text":"82"},"Replace the `\\` with `\\\\` to include the actual backslash character.",[104,105],"",[104,104],"\\"]